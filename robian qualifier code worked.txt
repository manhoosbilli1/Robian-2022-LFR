#include <Arduino.h>
#include "TB67H420FTG.h"
#include <PID_v1.h>

double KP =.06;            //you should edit this with your experiments....start with same values then increase or decrease as you like
double KD =0;
double KI = 0; 
double lastError = 0;
const int GOAL = 2500;
const unsigned char MAX_SPEED = 45;

const int r_IR = 8; 
const int l_IR = 10; 
bool buzOn = false;  
unsigned int now;  
const int buz = 12; 

// float Kd = 0;
// uint8_t multiP = 1;
// uint8_t multiI = 1;
// uint8_t multiD = 1;
// uint8_t Kpfinal;
// uint8_t Kifinal;
// uint8_t Kdfinal;
// int P;
// int I;
// int D;
// float Pvalue;
// float Ivalue;
// float Dvalue;
// int val, cnt = 0, v[3];
// boolean onoff = 0;



//                    Motor driver DRV8833:
TB67H420FTG driver(3,5,9,6);  //in1,in2, in3, in4
// const int motorSpeed = 100; // Half speed (255 / 2).

// QTR
#include <QTRSensors.h>
#define NUM_SENSORS 6                  // number of sensors used
#define NUM_SAMPLES_PER_SENSOR 4       // average 4 analog samples per sensor reading
#define EMITTER_PIN QTR_NO_EMITTER_PIN // emitter is controlled by digital pin 2. in this case no emitter pin

// sensors 0 through 5 are connected to analog inputs 0 through 5, respectively
QTRSensorsAnalog qtra((unsigned char[]){A0, A1, A2, A3, A4, A5}, NUM_SENSORS, NUM_SAMPLES_PER_SENSOR, EMITTER_PIN);
unsigned int sensorValues[NUM_SENSORS];

// void valuesread() {
//   val = Serial.read();
//   cnt++;
//   v[cnt] = val;
//   if (cnt == 2)
//     cnt = 0;
// }

// //In this void the the 2 read values are assigned.
// void processing() {
//   int a = v[1];
//   if (a == 1) {
//     KP = v[2];
//   }
//   if (a == 2) {
//     multiP = v[2];
//   }
//   if (a == 3) {
//     KI = v[2];
//   }
//   if (a == 4) {
//     multiI = v[2];
//   }
//   if (a == 5) {
//     KD = v[2];
//   }
//   if (a == 6) {
//     multiD = v[2];
//   }
//   if (a == 7) {
//     onoff = v[2];
//   }
// }


void followLine() {
  // Get line position
  unsigned int position = qtra.readLine(sensorValues);
    // Serial.println(position);

  // Compute error from line
  int error = GOAL - position;
  //
  // Compute motor adjustment
  int adjustment = KP * error + KD * (error - lastError);
  //
  // Store error for next increment
  lastError = error;
  //
  // Adjust motors
  driver.setMotorAPower(constrain(MAX_SPEED - adjustment, 0, MAX_SPEED));
  driver.setMotorBPower(constrain(MAX_SPEED + adjustment, 0, MAX_SPEED));

}
void calibrateLineSensor() {
  delay(500);
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);    // turn on Arduino's LED to indicate we are in calibration mode
  for (int i = 0; i < 10; i++)  // make the calibration take about 10 seconds
  {
    qtra.calibrate();       // reads all sensors 10 times at 2.5 ms per six sensors (i.e. ~25 ms per call)
  }
  digitalWrite(13, LOW);     // turn off Arduino's LED to indicate we are through with calibration
}


void setup()
{
  pinMode(r_IR, INPUT); 
  pinMode(l_IR, INPUT); 
  pinMode(buz, OUTPUT); 
  pinMode(13, OUTPUT); 

  // Start the serial port:
  Serial.begin(9600);
  // myPID.SetMode(AUTOMATIC);


  // // Attach the motors to the input pins:
  driver.init();

  delay(500);
  Serial.print("calibrating");
  // QTR calibration
  digitalWrite(13, HIGH);       // turn on Arduino's LED to indicate we are in calibration mode
  for (int i = 0; i < 100; i++) // make the calibration take about 10 seconds
  {
    qtra.calibrate(); // reads all sensors 10 times at 2.5 ms per six sensors (i.e. ~25 ms per call)
  }
  digitalWrite(13, LOW); // turn off Arduino's LED to indicate we are through with calibration

  // print the calibration minimum values measured when emitters were on
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtra.calibratedMinimumOn[i]);
    Serial.print(' ');
  }
  Serial.println();

  // print the calibration maximum values measured when emitters were on
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtra.calibratedMaximumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
  Serial.println();
  delay(1000);

  // calibration done

  Serial.println("Ready!");
}

void loop()
{
  if(digitalRead(r_IR) == HIGH && digitalRead(l_IR) == HIGH) 
  {
    Serial.println("buzzer on");
    buzOn = true; 
    digitalWrite(buz, HIGH); 
    digitalWrite(13, HIGH); 
    now = millis(); 
  }

  if(buzOn == true)
  {
    if(millis() - now <= 1000)
    {
      Serial.println("buzzer stopped");
      buzOn = false; 
      digitalWrite(buz, LOW); 
      digitalWrite(13, LOW);
    }
  }
  //setting values of pid with bluetooth 
  // if (Serial.available()) { 
  //   while(Serial.available() == 0);
  //   valuesread();
  //   processing();
  //   Serial.print("PID SET:          KP: "); 
  //   Serial.print(KP); 
  //   Serial.print("\tKD: "); 
  //   Serial.println(KD); 

  // }

    
  // line following part
  // Input = qtra.readLine(sensorValues);  //takes line position as input 1000-6000
  //  unsigned int position = qtra.readLine(sensorValues);  //takes line position as input 1000-5000

  // for (unsigned char i = 0; i < NUM_SENSORS; i++)
  // {
  //   Serial.print(sensorValues[i]);
  //   Serial.print('\t');
  //}
  //Serial.println(); // uncomment this line if you are using raw values
  // Serial.print(position); // comment this line out if you are using raw values
  // Serial.print('\t');
  // Serial.println(adjustment); 
   
  
  // Serial.println(Input); 
  // myPID.Compute();   //computes the appropriate output value to be fed to motors. 
  // driver.motorAForward(constrain(motorSpeed - Output, 0, motorSpeed));  //add the calculated output to one motor
  // driver.motorBForward(constrain(motorSpeed + Output, 0, motorSpeed));  //subtract the calculate output from another motor
  // driver.setMotorAPower(constrain(MAX_SPEED - Output, 0, MAX_SPEED));
  // driver.setMotorBPower(constrain(MAX_SPEED + Output, 0, MAX_SPEED));
  followLine();

  //when sensor on black line go straight with low speed. 
  //when sensor on goal and then T junction comes go striaght. 


}